// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  name                 String
  email                String        @unique
  emailVerified        DateTime?
  image                String?
  department           String?
  jobTitle             String?
  pointsBalance        Int           @default(0)
  monthlyAllowance     Int           @default(100)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  role                 Role          @relation(fields: [roleId], references: [id])
  roleId               String
  
  sentRecognitions     Recognition[] @relation("SentRecognitions")
  receivedRecognitions Recognition[] @relation("ReceivedRecognitions")
  badges               UserBadge[]
  redemptions          Redemption[]
  comments             Comment[]
  reactions            Reaction[]

  accounts             Account[]
  sessions             Session[]
   
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[]
  users       User[]
}

model Recognition {
  id            String      @id @default(uuid())
  points        Int
  message       String
  gifUrl        String?
  isPublic      Boolean     @default(true)
  approvalStatus String      @default("approved")
  createdAt     DateTime    @default(now())
  
  sender        User        @relation("SentRecognitions", fields: [senderId], references: [id])
  senderId      String
  
  receiver      User        @relation("ReceivedRecognitions", fields: [receiverId], references: [id])
  receiverId    String
  
  tags          Tag[]
  comments      Comment[]
  reactions     Reaction[]
}

model Tag {
  id            String        @id @default(uuid())
  name          String        @unique
  recognitions  Recognition[]
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  iconUrl     String
  createdAt   DateTime    @default(now())
  
  users       UserBadge[]
}

model UserBadge {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  
  badge       Badge     @relation(fields: [badgeId], references: [id])
  badgeId     String
  
  awardedAt   DateTime  @default(now())
  
  @@id([userId, badgeId])
}

model Reward {
  id          String       @id @default(uuid())
  name        String
  description String
  pointsCost  Int
  imageUrl    String?
  category    String
  isActive    Boolean      @default(true)
  stock       Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  redemptions Redemption[]
}

model Redemption {
  id          String    @id @default(uuid())
  pointsSpent Int
  status      String    @default("pending")
  redeemedAt  DateTime  @default(now())
  fulfilledAt DateTime?
  
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  
  reward      Reward    @relation(fields: [rewardId], references: [id])
  rewardId    String
}

model Comment {
  id            String      @id @default(uuid())
  content       String
  createdAt     DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  
  recognition   Recognition @relation(fields: [recognitionId], references: [id])
  recognitionId String
}

model Reaction {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  
  recognition   Recognition @relation(fields: [recognitionId], references: [id])
  recognitionId String
  
  type          String
  createdAt     DateTime    @default(now())
  
  @@id([userId, recognitionId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

